generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int        @id @default(autoincrement())
  createdAt         DateTime   @default(now()) @map("created_at")
  updatedAt         DateTime   @updatedAt @map("updated_at")
  email             String     @unique
  password          String
  favoritesAlbum    Album[]
  favoritesArtist   Artist[]
  historySongs      History[]
  favoritePlayLists Playlist[] @relation("userFavoritePlaylists")
  favoritesSong     Song[]     @relation("FavoriteSongs")
}

model Playlist {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  title       String   @unique
  coverBig    String   @map("cover_big")
  coverMedium String   @map("cover_medium")
  coverSmall  String   @map("cover_small")
  fans        Int
  releaseDate DateTime @map("release_date")
  userId      Int?     @map("user_id")
  User        User?    @relation("userFavoritePlaylists", fields: [userId], references: [id])
  genres      Genre[]  @relation("GenreToPlaylist")
  songs       Song[]   @relation("PlaylistToSong")
}

model Song {
  id            Int        @id @default(autoincrement())
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")
  title         String     @unique
  coverBig      String     @map("cover_big")
  coverMedium   String     @map("cover_medium")
  coverSmall    String     @map("cover_small")
  duration      Int
  releaseDate   DateTime   @map("release_date")
  mp3Path       String     @map("mp3_path")
  RelatedSongId Int?
  artistId      Int
  RelatedSong   Song?      @relation("TeacherStudents", fields: [RelatedSongId], references: [id])
  relatedSongs  Song[]     @relation("TeacherStudents")
  artist        Artist     @relation(fields: [artistId], references: [id])
  albums        Album[]    @relation("AlbumToSong")
  users         User[]     @relation("FavoriteSongs")
  genres        Genre[]    @relation("GenreToSong")
  History       History[]  @relation("HistoryToSong")
  playlists     Playlist[] @relation("PlaylistToSong")
}

model Album {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  title       String   @unique
  coverBig    String   @map("cover_big")
  coverMedium String   @map("cover_medium")
  coverSmall  String   @map("cover_small")
  fans        Int
  releaseDate DateTime @map("release_date")
  userId      Int?     @map("user_id")
  artistId    Int
  artist      Artist   @relation(fields: [artistId], references: [id])
  User        User?    @relation(fields: [userId], references: [id])
  genre       Genre[]  @relation("AlbumToGenre")
  songs       Song[]   @relation("AlbumToSong")
}

model Artist {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  name          String   @unique
  followers     Int
  pictureBig    String   @map("picture_big")
  pictureMedium String   @map("picture_medium")
  pictureSmall  String   @map("picture_small")
  userId        Int?     @map("user_id")
  Album         Album[]
  User          User?    @relation(fields: [userId], references: [id])
  Song          Song[]
}

model Genre {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  name      String     @unique
  color     String
  icon      String
  albums    Album[]    @relation("AlbumToGenre")
  playlists Playlist[] @relation("GenreToPlaylist")
  songs     Song[]     @relation("GenreToSong")
}

model History {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    Int?
  User      User?    @relation(fields: [userId], references: [id])
  songs     Song[]   @relation("HistoryToSong")
}
