generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int        @id @default(autoincrement())
  createdAt         DateTime   @default(now()) @map("created_at")
  updatedAt         DateTime   @updatedAt @map("updated_at")
  email             String     @unique
  name              String?
  avatarPath        String     @default("/assets/noAvatar.png") @map("avatar_path")
  password          String
  userPlaylists     Playlist[] @relation("userPlaylists")
  favoritesSong     Song[]
  favoritesAlbum    Album[]
  favoritesArtist   Artist[]
  favoritePlayLists Playlist[] @relation("userFavoritePlaylists")
}

model Playlist {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  title          String   @unique
  coverBig       String   @map("cover_big")
  coverMedium    String   @map("cover_medium")
  coverSmall     String   @map("cover_small")
  fans           Int
  releaseDate    DateTime @map("release_date")
  songs          Song[]
  genres         Genre[]
  userId         Int?     @map("user_id")
  favoriteUserId Int?     @map("favorite_user_id")
  User           User?    @relation("userFavoritePlaylists", fields: [userId], references: [id])
  FavoriteUser   User?    @relation("userPlaylists", fields: [favoriteUserId], references: [id])
}

model Song {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  title       String     @unique
  coverBig    String     @map("cover_big")
  coverMedium String     @map("cover_medium")
  coverSmall  String     @map("cover_small")
  duration    Int
  releaseDate DateTime   @map("release_date")
  mp3Path     String     @map("mp3_path")
  albums      Album[]
  artists     Artist[]
  playlists   Playlist[]
  genres      Genre[]
  User        User?      @relation(fields: [userId], references: [id])
  userId      Int?       @map("user_id")
}

model Album {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  title       String   @unique
  coverBig    String   @map("cover_big")
  coverMedium String   @map("cover_medium")
  coverSmall  String   @map("cover_small")
  fans        Int
  releaseDate DateTime @map("release_date")
  artist      Artist[]
  genre       Genre[]
  songs       Song[]
  User        User?    @relation(fields: [userId], references: [id])
  userId      Int?     @map("user_id")
}

model Artist {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  name          String   @unique
  followers     Int
  pictureBig    String   @map("picture_big")
  pictureMedium String   @map("picture_medium")
  pictureSmall  String   @map("picture_small")
  albums        Album[]
  songs         Song[]
  User          User?    @relation(fields: [userId], references: [id])
  userId        Int?     @map("user_id")
}

model Genre {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  name      String     @unique
  songs     Song[]
  albums    Album[]
  playlists Playlist[]
}
